package UI;

//Code created by Kevin Flynn C18502203
//Code orginally submitted on 27th March
//Updated code submitted on 3rd April


//import the necessary modules
import Main.DatabaseConnecter;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.ResultSetMetaData;
import javax.swing.JOptionPane;
import java.util.Random;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.lang3.ArrayUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C18502203
 */
public class SampleJFrame extends javax.swing.JFrame {
    
    DatabaseConnecter DCC;

    /**
     * Creates new form SampleJFrame
     */
    public SampleJFrame() throws SQLException, ClassNotFoundException {
        //tableModel = new javax.swing.table.DefaultTableModel();
        initComponents();
        //viewBooksTable.setModel(DbUtils.resultSetToTableMode1());
        DefaultTableModel model = new DefaultTableModel(); 
        JTable table = new JTable(tableModel); 
        DCC=new DatabaseConnecter("Library.accdb");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        Login = new javax.swing.JPanel();
        Username = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        Password = new javax.swing.JTextField();
        LoginButton = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        HomePage = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        ViewBookButton = new javax.swing.JButton();
        AddBookButton = new javax.swing.JButton();
        RemoveBookButton = new javax.swing.JButton();
        ViewUserButton = new javax.swing.JButton();
        AddUserButton = new javax.swing.JButton();
        RemoveUserButton = new javax.swing.JButton();
        OverdueAccountsButton = new javax.swing.JButton();
        LogoutButton = new javax.swing.JButton();
        IssueBooksButton = new javax.swing.JButton();
        ReturnBooksButton = new javax.swing.JButton();
        BookTable = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewBooksTable = new javax.swing.JTable();
        ReturnHome = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        AddBook = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        BookTitle = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        BookAuthour = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        BookPublisher = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        BookGenre = new javax.swing.JTextField();
        SubmitBook = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        BookPrice = new javax.swing.JTextField();
        ReturnHome4 = new javax.swing.JButton();
        BookStock = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        UserTable = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        viewUsersTable = new javax.swing.JTable();
        ReturnHome1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        AddUser = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        UserName = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        UserEmail = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        UserPhone = new javax.swing.JTextField();
        SubmitUser = new javax.swing.JButton();
        jLabel40 = new javax.swing.JLabel();
        UserAddress = new javax.swing.JTextField();
        ReturnHome2 = new javax.swing.JButton();
        RemoveUser = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        UserNameRemove = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        EmailRemove = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        PhoneRemove = new javax.swing.JTextField();
        SubmitRemoveUser = new javax.swing.JButton();
        jLabel44 = new javax.swing.JLabel();
        AddressRemove = new javax.swing.JTextField();
        ReturnHome3 = new javax.swing.JButton();
        RemoveBook = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        BookTitleRemove = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        BookAuthourRemove = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        BookPublisherRemove = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        BookGenreRemove = new javax.swing.JTextField();
        SubmitRemoveBook = new javax.swing.JButton();
        jLabel45 = new javax.swing.JLabel();
        BookPriceRemove = new javax.swing.JTextField();
        ReturnHome5 = new javax.swing.JButton();
        BookStockRemove = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        IssueBook = new javax.swing.JPanel();
        jLabel46 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        BookTitleIssue = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        BookAuthourIssue = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        BookPublisherIssue = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        BookGenreIssue = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        BookPriceIssue = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        PersonNameIssue = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        PersonAddressIssue = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        PersonEmailIssue = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        PersonPhoneIssue = new javax.swing.JTextField();
        jButton13 = new javax.swing.JButton();
        ReturnHome6 = new javax.swing.JButton();
        IssuedBook = new javax.swing.JButton();
        BuyorRent = new javax.swing.JComboBox<>();
        jLabel64 = new javax.swing.JLabel();
        BookStockIssue = new javax.swing.JTextField();
        IssuedBookTable = new javax.swing.JPanel();
        jLabel54 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        viewIssuedBooksTable = new javax.swing.JTable();
        jButton15 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        OverdueAccounts = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        viewOverdueAccountsTable = new javax.swing.JTable();
        jButton17 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        ReturnBook = new javax.swing.JPanel();
        jLabel55 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        BookTitleReturn = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        BookAuthourReturn = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        BookPublisherReturn = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        BookGenreReturn = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        BookPriceReturn = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        PersonEmailReturn = new javax.swing.JTextField();
        jButton14 = new javax.swing.JButton();
        ReturnHome7 = new javax.swing.JButton();
        BuyorRentReturn = new javax.swing.JComboBox<>();
        jLabel65 = new javax.swing.JLabel();
        BookStockReturn = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton8.setText("jButton8");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setLayout(new java.awt.CardLayout());

        Login.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        Username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsernameActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Bauhaus 93", 0, 20)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Login Page");
        jLabel1.setAlignmentX(0.5F);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setText("Username:");

        jLabel24.setText("Password:");

        Password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordActionPerformed(evt);
            }
        });

        LoginButton.setText("Login");
        LoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginButtonActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Bauhaus 93", 0, 24)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("<html><u>Library Management System</u></html>");

        javax.swing.GroupLayout LoginLayout = new javax.swing.GroupLayout(Login);
        Login.setLayout(LoginLayout);
        LoginLayout.setHorizontalGroup(
            LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginLayout.createSequentialGroup()
                .addGap(353, 353, 353)
                .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Password)
                    .addComponent(Username)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LoginButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(353, Short.MAX_VALUE))
        );
        LoginLayout.setVerticalGroup(
            LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginLayout.createSequentialGroup()
                .addContainerGap(143, Short.MAX_VALUE)
                .addComponent(jLabel26)
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LoginButton)
                .addGap(64, 64, 64))
        );

        jPanel3.add(Login, "card9");

        jLabel27.setFont(new java.awt.Font("Bauhaus 93", 0, 36)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Library Management System");
        jLabel27.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel28.setFont(new java.awt.Font("Bauhaus 93", 0, 12)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Updated: 21st April, 2022");
        jLabel28.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ViewBookButton.setText("View Books");
        ViewBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewBookButtonActionPerformed(evt);
            }
        });

        AddBookButton.setText("Add Books");
        AddBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBookButtonActionPerformed(evt);
            }
        });

        RemoveBookButton.setText("Remove Books");
        RemoveBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveBookButtonActionPerformed(evt);
            }
        });

        ViewUserButton.setText("View Users");
        ViewUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewUserButtonActionPerformed(evt);
            }
        });

        AddUserButton.setText("Add Users");
        AddUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddUserButtonActionPerformed(evt);
            }
        });

        RemoveUserButton.setText("Remove Users");
        RemoveUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveUserButtonActionPerformed(evt);
            }
        });

        OverdueAccountsButton.setText("Overdue Accounts");
        OverdueAccountsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OverdueAccountsButtonActionPerformed(evt);
            }
        });

        LogoutButton.setText("Logout");
        LogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutButtonActionPerformed(evt);
            }
        });

        IssueBooksButton.setText("Issue Books");
        IssueBooksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IssueBooksButtonActionPerformed(evt);
            }
        });

        ReturnBooksButton.setText("Return Books");
        ReturnBooksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnBooksButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HomePageLayout = new javax.swing.GroupLayout(HomePage);
        HomePage.setLayout(HomePageLayout);
        HomePageLayout.setHorizontalGroup(
            HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(HomePageLayout.createSequentialGroup()
                .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(LogoutButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, HomePageLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ViewUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ViewBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(AddBookButton, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(AddUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RemoveBookButton, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(RemoveUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(OverdueAccountsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(IssueBooksButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(ReturnBooksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        HomePageLayout.setVerticalGroup(
            HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePageLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(39, 39, 39)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ReturnBooksButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ViewBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AddBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(RemoveBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(IssueBooksButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(OverdueAccountsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(RemoveUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ViewUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                .addComponent(LogoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.add(HomePage, "card9");

        jLabel4.setFont(new java.awt.Font("Bauhaus 93", 0, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("List of Books");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        viewBooksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Author", "Publisher", "Genre", "Price", "Stock"
            }
        ));
        jScrollPane2.setViewportView(viewBooksTable);
        if (viewBooksTable.getColumnModel().getColumnCount() > 0) {
            viewBooksTable.getColumnModel().getColumn(5).setHeaderValue("Stock");
        }

        ReturnHome.setText("Return to Home Page");
        ReturnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnHomeActionPerformed(evt);
            }
        });

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BookTableLayout = new javax.swing.GroupLayout(BookTable);
        BookTable.setLayout(BookTableLayout);
        BookTableLayout.setHorizontalGroup(
            BookTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
                .addGap(45, 45, 45))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookTableLayout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ReturnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        BookTableLayout.setVerticalGroup(
            BookTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookTableLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addGroup(BookTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ReturnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)))
        );

        jPanel3.add(BookTable, "card10");

        jLabel5.setFont(new java.awt.Font("Bauhaus 93", 0, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Add a Book");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setText("Book Title:");

        jLabel7.setText("Book Authour:");

        jLabel8.setText("Book Publisher:");

        jLabel9.setText("Book Genre:");

        SubmitBook.setText("Submit");
        SubmitBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitBookActionPerformed(evt);
            }
        });

        jLabel29.setText("Book Price:");

        ReturnHome4.setText("Return to Home Page");
        ReturnHome4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnHome4ActionPerformed(evt);
            }
        });

        jLabel3.setText("Book Stock");

        javax.swing.GroupLayout AddBookLayout = new javax.swing.GroupLayout(AddBook);
        AddBook.setLayout(AddBookLayout);
        AddBookLayout.setHorizontalGroup(
            AddBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(AddBookLayout.createSequentialGroup()
                .addGap(294, 294, 294)
                .addComponent(SubmitBook, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ReturnHome4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddBookLayout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(AddBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(BookAuthour, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BookTitle, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BookPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                .addGroup(AddBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BookPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel29)
                    .addComponent(BookGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BookStock, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(141, 141, 141))
        );
        AddBookLayout.setVerticalGroup(
            AddBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddBookLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(AddBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddBookLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookAuthour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddBookLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                .addGroup(AddBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubmitBook)
                    .addComponent(ReturnHome4))
                .addContainerGap())
        );

        jPanel3.add(AddBook, "card11");

        jLabel34.setFont(new java.awt.Font("Bauhaus 93", 0, 24)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("List of Users");
        jLabel34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        viewUsersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserId", "UserName", "Email", "Phone", "Address"
            }
        ));
        jScrollPane3.setViewportView(viewUsersTable);

        ReturnHome1.setText("Return to Home Page");
        ReturnHome1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnHome1ActionPerformed(evt);
            }
        });

        jButton2.setText("Print");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UserTableLayout = new javax.swing.GroupLayout(UserTable);
        UserTable.setLayout(UserTableLayout);
        UserTableLayout.setHorizontalGroup(
            UserTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UserTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
                .addGap(45, 45, 45))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UserTableLayout.createSequentialGroup()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ReturnHome1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        UserTableLayout.setVerticalGroup(
            UserTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserTableLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addGroup(UserTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ReturnHome1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)))
        );

        jPanel3.add(UserTable, "card10");

        jLabel35.setFont(new java.awt.Font("Bauhaus 93", 0, 24)); // NOI18N
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel35.setText("Add a User");
        jLabel35.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel37.setText("User Name");

        jLabel38.setText("User Email");

        jLabel39.setText("User Phone");

        SubmitUser.setText("Submit");
        SubmitUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitUserActionPerformed(evt);
            }
        });

        jLabel40.setText("Address");

        ReturnHome2.setText("Return to Home Page");
        ReturnHome2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnHome2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AddUserLayout = new javax.swing.GroupLayout(AddUser);
        AddUser.setLayout(AddUserLayout);
        AddUserLayout.setHorizontalGroup(
            AddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(AddUserLayout.createSequentialGroup()
                .addGap(294, 294, 294)
                .addGroup(AddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddUserLayout.createSequentialGroup()
                        .addGroup(AddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UserPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel39)
                            .addComponent(jLabel38)
                            .addComponent(UserEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(AddUserLayout.createSequentialGroup()
                        .addGroup(AddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(AddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel40)
                                .addComponent(UserAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(AddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel37)
                                .addComponent(UserName)
                                .addComponent(SubmitUser, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 293, Short.MAX_VALUE)
                        .addComponent(ReturnHome2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        AddUserLayout.setVerticalGroup(
            AddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddUserLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jLabel37)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabel40)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(AddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubmitUser)
                    .addComponent(ReturnHome2))
                .addContainerGap())
        );

        jPanel3.add(AddUser, "card11");

        jLabel36.setFont(new java.awt.Font("Bauhaus 93", 0, 24)); // NOI18N
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel36.setText("Remove a User");
        jLabel36.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel41.setText("UserName");

        jLabel42.setText("Email");

        jLabel43.setText("Phone");

        SubmitRemoveUser.setText("Submit");
        SubmitRemoveUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitRemoveUserActionPerformed(evt);
            }
        });

        jLabel44.setText("Address");

        ReturnHome3.setText("Return to Home Page");
        ReturnHome3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnHome3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RemoveUserLayout = new javax.swing.GroupLayout(RemoveUser);
        RemoveUser.setLayout(RemoveUserLayout);
        RemoveUserLayout.setHorizontalGroup(
            RemoveUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(RemoveUserLayout.createSequentialGroup()
                .addGap(294, 294, 294)
                .addGroup(RemoveUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RemoveUserLayout.createSequentialGroup()
                        .addGroup(RemoveUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PhoneRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel43)
                            .addComponent(jLabel42)
                            .addComponent(EmailRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(RemoveUserLayout.createSequentialGroup()
                        .addGroup(RemoveUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(RemoveUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel41)
                                .addComponent(UserNameRemove)
                                .addComponent(SubmitRemoveUser, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                            .addGroup(RemoveUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel44)
                                .addComponent(AddressRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 293, Short.MAX_VALUE)
                        .addComponent(ReturnHome3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        RemoveUserLayout.setVerticalGroup(
            RemoveUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RemoveUserLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(jLabel41)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserNameRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel44)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddressRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel42)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EmailRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel43)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PhoneRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(RemoveUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubmitRemoveUser)
                    .addComponent(ReturnHome3))
                .addContainerGap())
        );

        jPanel3.add(RemoveUser, "card11");

        jLabel12.setFont(new java.awt.Font("Bauhaus 93", 0, 24)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Remove a Book");
        jLabel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel13.setText("Book Title:");

        jLabel14.setText("Book Authour:");

        jLabel15.setText("Book Publisher:");

        jLabel16.setText("Book Genre:");

        SubmitRemoveBook.setText("Submit");
        SubmitRemoveBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitRemoveBookActionPerformed(evt);
            }
        });

        jLabel45.setText("Book Price:");

        ReturnHome5.setText("Return to Home Page");
        ReturnHome5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnHome5ActionPerformed(evt);
            }
        });

        jLabel17.setText("Book Stock");

        javax.swing.GroupLayout RemoveBookLayout = new javax.swing.GroupLayout(RemoveBook);
        RemoveBook.setLayout(RemoveBookLayout);
        RemoveBookLayout.setHorizontalGroup(
            RemoveBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(RemoveBookLayout.createSequentialGroup()
                .addGap(294, 294, 294)
                .addComponent(SubmitRemoveBook, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ReturnHome5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RemoveBookLayout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(RemoveBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(BookAuthourRemove, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BookTitleRemove, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BookPublisherRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                .addGroup(RemoveBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BookPriceRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel45)
                    .addComponent(BookGenreRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BookStockRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(141, 141, 141))
        );
        RemoveBookLayout.setVerticalGroup(
            RemoveBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RemoveBookLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(RemoveBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RemoveBookLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookTitleRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookAuthourRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookPublisherRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RemoveBookLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookGenreRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel45)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookPriceRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookStockRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                .addGroup(RemoveBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubmitRemoveBook)
                    .addComponent(ReturnHome5))
                .addContainerGap())
        );

        jPanel3.add(RemoveBook, "card11");

        jLabel46.setFont(new java.awt.Font("Bauhaus 93", 0, 24)); // NOI18N
        jLabel46.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel46.setText("Issue a Book");
        jLabel46.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel18.setText("Book Title:");

        jLabel19.setText("Book Authour:");

        jLabel47.setText("Book Publisher:");

        jLabel48.setText("Book Genre:");

        jLabel49.setText("Book Price:");

        jLabel50.setText("User Name:");

        jLabel51.setText("User Address:");

        jLabel52.setText("User Email:");

        jLabel53.setText("User Phone:");

        jButton13.setText("Submit");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        ReturnHome6.setText("Return Home");
        ReturnHome6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnHome6ActionPerformed(evt);
            }
        });

        IssuedBook.setText("Issued Books");
        IssuedBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IssuedBookActionPerformed(evt);
            }
        });

        BuyorRent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "to buy", "to rent"}));
        BuyorRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyorRentActionPerformed(evt);
            }
        });

        jLabel64.setText("Book Stock:");

        javax.swing.GroupLayout IssueBookLayout = new javax.swing.GroupLayout(IssueBook);
        IssueBook.setLayout(IssueBookLayout);
        IssueBookLayout.setHorizontalGroup(
            IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel46, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IssueBookLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(IssuedBook, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(IssueBookLayout.createSequentialGroup()
                        .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel49)
                            .addComponent(jLabel48)
                            .addComponent(jLabel47)
                            .addComponent(jLabel19)
                            .addComponent(jLabel18)
                            .addComponent(BookTitleIssue)
                            .addComponent(BookAuthourIssue)
                            .addComponent(BookPublisherIssue)
                            .addComponent(BookGenreIssue)
                            .addComponent(BookPriceIssue, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                        .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(IssueBookLayout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel50)
                                    .addComponent(PersonNameIssue)
                                    .addComponent(jLabel51)
                                    .addComponent(PersonAddressIssue)
                                    .addComponent(jLabel52)
                                    .addComponent(PersonEmailIssue)
                                    .addComponent(jLabel53)
                                    .addComponent(PersonPhoneIssue, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IssueBookLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BuyorRent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(IssueBookLayout.createSequentialGroup()
                        .addComponent(ReturnHome6, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IssueBookLayout.createSequentialGroup()
                        .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel64)
                            .addComponent(BookStockIssue, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        IssueBookLayout.setVerticalGroup(
            IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IssueBookLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel50)
                    .addComponent(jLabel64))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BookTitleIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PersonNameIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BookStockIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel51))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BookAuthourIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PersonAddressIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(jLabel52))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BookPublisherIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PersonEmailIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(jLabel53))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BookGenreIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PersonPhoneIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel49)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BookPriceIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BuyorRent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(IssueBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton13)
                    .addComponent(ReturnHome6)
                    .addComponent(IssuedBook))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPanel3.add(IssueBook, "card13");

        jLabel54.setFont(new java.awt.Font("Bauhaus 93", 0, 24)); // NOI18N
        jLabel54.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel54.setText("Issued Books");
        jLabel54.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        viewIssuedBooksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "BookTitle", "BookAuthour", "BookPublisher", "BookGenre", "BookPrice", "BookStock", "UserName", "UserAddress", "UserEmail", "UserPhone", "BuyOrRent", "DatePurchased", "DateForReturn"
            }
        ));
        jScrollPane4.setViewportView(viewIssuedBooksTable);

        jButton15.setText("Go Back");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton30.setText("Print");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IssuedBookTableLayout = new javax.swing.GroupLayout(IssuedBookTable);
        IssuedBookTable.setLayout(IssuedBookTableLayout);
        IssuedBookTableLayout.setHorizontalGroup(
            IssuedBookTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel54, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 989, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IssuedBookTableLayout.createSequentialGroup()
                .addComponent(jButton30, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        IssuedBookTableLayout.setVerticalGroup(
            IssuedBookTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IssuedBookTableLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IssuedBookTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton30)))
        );

        jPanel3.add(IssuedBookTable, "card14");

        jLabel20.setFont(new java.awt.Font("Bauhaus 93", 0, 24)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Overdue Accounts");
        jLabel20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        viewOverdueAccountsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "BookTitle", "BookAuthour", "BookPublisher", "BookGenre", "BookPrice", "BookStock", "UserName", "UserAddress", "UserEmail", "UserPhone", "BuyOrRent", "DatePurchased", "DateForReturn"
            }
        ));
        jScrollPane6.setViewportView(viewOverdueAccountsTable);

        jButton17.setText("Return to Home Page");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton31.setText("Print");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OverdueAccountsLayout = new javax.swing.GroupLayout(OverdueAccounts);
        OverdueAccounts.setLayout(OverdueAccountsLayout);
        OverdueAccountsLayout.setHorizontalGroup(
            OverdueAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OverdueAccountsLayout.createSequentialGroup()
                .addComponent(jButton31, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 695, Short.MAX_VALUE)
                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane6)
        );
        OverdueAccountsLayout.setVerticalGroup(
            OverdueAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OverdueAccountsLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OverdueAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton17)
                    .addComponent(jButton31)))
        );

        jPanel3.add(OverdueAccounts, "card15");

        jLabel55.setFont(new java.awt.Font("Bauhaus 93", 0, 24)); // NOI18N
        jLabel55.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel55.setText("Return a Book");
        jLabel55.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel21.setText("Book Title:");

        jLabel22.setText("Book Authour:");

        jLabel56.setText("Book Publisher:");

        jLabel57.setText("Book Genre:");

        jLabel58.setText("Book Price:");

        jLabel61.setText("User Email:");

        jButton14.setText("Submit");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        ReturnHome7.setText("Return Home");
        ReturnHome7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnHome7ActionPerformed(evt);
            }
        });

        BuyorRentReturn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "bought", "rented"}));
        BuyorRentReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyorRentReturnActionPerformed(evt);
            }
        });

        jLabel65.setText("Number of books to return");

        javax.swing.GroupLayout ReturnBookLayout = new javax.swing.GroupLayout(ReturnBook);
        ReturnBook.setLayout(ReturnBookLayout);
        ReturnBookLayout.setHorizontalGroup(
            ReturnBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel55, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReturnBookLayout.createSequentialGroup()
                .addGap(0, 221, Short.MAX_VALUE)
                .addGroup(ReturnBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ReturnBookLayout.createSequentialGroup()
                        .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(ReturnHome7, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2))
                    .addGroup(ReturnBookLayout.createSequentialGroup()
                        .addGroup(ReturnBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel58)
                            .addComponent(jLabel57)
                            .addComponent(jLabel56)
                            .addComponent(jLabel22)
                            .addComponent(jLabel21)
                            .addComponent(BookTitleReturn)
                            .addComponent(BookAuthourReturn)
                            .addComponent(BookPublisherReturn)
                            .addComponent(BookGenreReturn)
                            .addComponent(BookPriceReturn, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                        .addGroup(ReturnBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ReturnBookLayout.createSequentialGroup()
                                .addGap(288, 288, 288)
                                .addComponent(BuyorRentReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReturnBookLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                                .addGroup(ReturnBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel61)
                                    .addGroup(ReturnBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(PersonEmailReturn)
                                        .addComponent(jLabel65)
                                        .addComponent(BookStockReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(123, 123, 123))))))
        );
        ReturnBookLayout.setVerticalGroup(
            ReturnBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReturnBookLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BookTitleReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addGap(19, 19, 19)
                .addGroup(ReturnBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BookAuthourReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel61))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReturnBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ReturnBookLayout.createSequentialGroup()
                        .addComponent(jLabel56)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookPublisherReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel57))
                    .addGroup(ReturnBookLayout.createSequentialGroup()
                        .addComponent(PersonEmailReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel65)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BookStockReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BookGenreReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel58)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReturnBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BookPriceReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BuyorRentReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ReturnBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton14)
                    .addComponent(ReturnHome7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.add(ReturnBook, "card13");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginButtonActionPerformed
        try {
            // TODO add your handling code here:
            String nameStr = Username.getText(); //gets user input for username
            String passStr = Password.getText();  //gets user input for password
            int countcheck = 0;                     //countcheck set to 0           
            
            String UserName2="";
            String Password2=""; 
            ResultSet result=DCC.query("SELECT UserName, Password FROM Admin WHERE Username='"+nameStr+"' and Password='"+passStr+"'");
            while(result.next()){
                //result.getString("FirstName");
                //result.getString("LastName");
                UserName2 = result.getString("UserName");
                Password2 = result.getString("Password");
            }
     
            if ("".equals(nameStr) || " ".equals(nameStr)) { //error checking, if the username field is empty
                JOptionPane.showMessageDialog(null,"Please enter your username"); //joptionpane to display message, asking user to enter student name
                countcheck = -1;  //countcheck set to minus 1
            }
            
            if ("".equals(passStr) || " ".equals(passStr)) { //error checking, if the password field is empty
                JOptionPane.showMessageDialog(null,"Please enter your password"); //joptionpane to display message, asking user to enter student id
                countcheck = -1;  //countcheck set to minus 1
            }
            
            if (!"".equals(nameStr) || " ".equals(nameStr)) { //error checking, if the username field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
            
            if (!"".equals(passStr) || " ".equals(passStr)) { //error checking, if the password field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
            
            if (UserName2.equals(nameStr) && !Password2.equals(passStr) && countcheck==2) { //error checking, if the username field is empty
                JOptionPane.showMessageDialog(null,"Incorrect username and/or password, please try again"); //joptionpane to display message, asking user to enter student id
                countcheck = 2;  //countcheck set to minus 1
            }
            
            if (!UserName2.equals(nameStr) && Password2.equals(passStr) && countcheck==2) { //error checking, if the username field is empty
                JOptionPane.showMessageDialog(null,"Incorrect username and/or password, please try again"); //joptionpane to display message, asking user to enter student id
                countcheck = 2;  //countcheck set to minus 1
            }
            
            if (!UserName2.equals(nameStr) && !Password2.equals(passStr) && countcheck==2) { //error checking, if the username field is empty
                JOptionPane.showMessageDialog(null,"Incorrect username and/or password, please try again"); //joptionpane to display message, asking user to enter student id
                countcheck = 2;  //countcheck set to minus 1
            }
            
            if (UserName2.equals(nameStr) && Password2.equals(passStr) && countcheck==2) { //error checking, if the username field is empty
                countcheck = 3;  //countcheck set to minus 1
            }

            if (countcheck==3){
                //if the countcheck is zero
                jPanel3.removeAll();   //remove jpanel
                jPanel3.repaint();
                jPanel3.revalidate();
                jPanel3.add(HomePage);
                jPanel3.repaint();
                jPanel3.revalidate();
            }
        } catch (SQLException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_LoginButtonActionPerformed

    private void PasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordActionPerformed

    private void UsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UsernameActionPerformed

    private void ViewBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewBookButtonActionPerformed
      
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(BookTable);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
        DefaultTableModel reset = (DefaultTableModel) viewBooksTable.getModel();
        reset.setRowCount(0);  //reset table each time so it doesnt keep appending on each time
                   
            ResultSet result = null;
        try {
            result = DCC.query("SELECT * From Books");
        } catch (SQLException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //print out each column in database to a field on the jtable
        try {
            while(result.next()){
  
                String Title=result.getString("Title");
                String Author=result.getString("Authour");
                String Publisher=result.getString("Publisher");
                String Genre=result.getString("Genre");
                String Price=result.getString("Price");
                String Stock=result.getString("Stock");
                String tbData[]  = {Title,Author,Publisher,Genre,Price,Stock};
                DefaultTableModel tblModel = (DefaultTableModel) viewBooksTable.getModel();
                tblModel.addRow(tbData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_ViewBookButtonActionPerformed

    private void ReturnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnHomeActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(HomePage);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
    }//GEN-LAST:event_ReturnHomeActionPerformed

    private void LogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutButtonActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(Login);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
        Username.setText(""); //sets username text field to empty
        Password.setText("");  //gets password text field to empty
    }//GEN-LAST:event_LogoutButtonActionPerformed

    private void SubmitBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitBookActionPerformed

            // TODO add your handling code here:
            String BookTitleStr = BookTitle.getText();  //gets user input for BookTitle
            String BookAuthourStr = BookAuthour.getText(); //gets user input for BookAuthour
            String BookPublisherStr = BookPublisher.getText();  //gets user input for BookPublisher
            String BookGenreStr = BookGenre.getText(); //gets user input for BookGenre
            String BookPriceStr = BookPrice.getText(); //gets user input for BookPrice
            String BookStockStr = BookStock.getText(); //gets user input for BookStock
            
            int countcheck = 0;                     //countcheck set to 0

            if ("".equals(BookTitleStr) || " ".equals(BookTitleStr)) { //error checking, if the BookTitleStr field is empty
                JOptionPane.showMessageDialog(null,"Please enter title"); //joptionpane to display message, asking user to enter BookTitleStr
                countcheck = -1;  //countcheck set to minus 1
            }
             
            if ("".equals(BookAuthourStr) || " ".equals(BookAuthourStr)) { //error checking, if the BookAuthourStr field is empty
                JOptionPane.showMessageDialog(null,"Please enter authour"); //joptionpane to display message, asking user to enter BookAuthourStr
                countcheck = -1;  //countcheck set to minus 1
            }
            
            if ("".equals(BookPublisherStr) || " ".equals(BookPublisherStr)) { //error checking, if the password field is empty
                JOptionPane.showMessageDialog(null,"Please enter publisher"); //joptionpane to display message, asking user to enter student id
                countcheck = -1;  //countcheck set to minus 1
            }
            
            if ("".equals(BookGenreStr) || " ".equals(BookGenreStr)) { //error checking, if the BookGenreStr is empty
                JOptionPane.showMessageDialog(null,"Please enter genre"); //joptionpane to display message, asking user to enter BookGenreStr
                countcheck = -1;  //countcheck set to minus 1
            }
            
            if ("".equals(BookPriceStr) || " ".equals(BookPriceStr)) { //error checking, if the BookPriceStr field is empty
                JOptionPane.showMessageDialog(null,"Please enter book Price"); //joptionpane to display message, asking user to enter BookPriceStr
                countcheck = -1;  //countcheck set to minus 1
            }
            
            if ("".equals(BookStockStr) || " ".equals(BookStockStr)) { //error checking, if the BookStockStr field is empty
                JOptionPane.showMessageDialog(null,"Please enter book stock"); //joptionpane to display message, asking user to enter sBookStockStr
                countcheck = -1;  //countcheck set to minus 1
            }            
            
            int stockInt = 0;
            try {
                stockInt = Integer.parseInt(BookStockStr);
            }
            catch (NumberFormatException e) {
                 //Not an integer
                 JOptionPane.showMessageDialog(null,"Book stock must be number");
                 countcheck = -1;
            }
  
            if (!"".equals(BookTitleStr) || " ".equals(BookTitleStr)) { //error checking, if the BookTitleStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
            
            if (!"".equals(BookAuthourStr) || " ".equals(BookAuthourStr)) { //error checking, if the BookAuthourStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
            
            if (!"".equals(BookPublisherStr) || " ".equals(BookPublisherStr)) { //error checking, if the BookPublisherStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
        
            if (!"".equals(BookGenreStr) || " ".equals(BookGenreStr)) { //error checking, if the BookGenreStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
            
            if (!"".equals(BookPriceStr) || " ".equals(BookPriceStr)) { //error checking, if the BookPriceStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }         
         
            try {  
            ResultSet result=DCC.query("SELECT Title, Authour, Publisher, Genre, Price FROM Books WHERE Title='"+BookTitleStr+"' and Authour='"+BookAuthourStr+"' and Publisher='"+BookPublisherStr+"' and Genre='"+BookGenreStr+"' and Price='"+BookPriceStr+"'");
            if(result.next()){
                JOptionPane.showMessageDialog(null,"Book in Database increasing stock by "+stockInt);
                int done =DCC.update("UPDATE Books SET Stock = Stock + "+stockInt+" WHERE Title='"+BookTitleStr+"' and Authour='"+BookAuthourStr+"' and Publisher='"+BookPublisherStr+"' and Genre='"+BookGenreStr+"' and Price='"+BookPriceStr+"'");
                countcheck = -1;
            }            
            
            } catch (SQLException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

            //insert book into books table
            if (countcheck==5){
                JOptionPane.showMessageDialog(null,"Insering new book into library");
                try {
                    //if the countcheck is zero
                    
                    int done =DCC.update("INSERT INTO Books (Title, Authour, Publisher, Genre, Price, Stock) VALUES ('"+BookTitleStr+"', '"+BookAuthourStr+"', '"+BookPublisherStr+"', '"+BookGenreStr+"', '"+BookPriceStr+"', '"+stockInt+"')");
                    
                    jPanel3.removeAll();   //remove jpanel
                    jPanel3.repaint();
                    jPanel3.add(HomePage);
                    jPanel3.revalidate();
                    jPanel3.repaint();
                    jPanel3.revalidate();
                } catch (SQLException ex) {
                    Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
 
    }//GEN-LAST:event_SubmitBookActionPerformed

    private void ReturnHome4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnHome4ActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(HomePage);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
        

    }//GEN-LAST:event_ReturnHome4ActionPerformed

    private void AddBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBookButtonActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(AddBook);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();

    }//GEN-LAST:event_AddBookButtonActionPerformed

    private void RemoveBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveBookButtonActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(RemoveBook);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();

    }//GEN-LAST:event_RemoveBookButtonActionPerformed

    private void ViewUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewUserButtonActionPerformed
        try {
            // TODO add your handling code here:
            jPanel3.removeAll();                          //remove jpanel
            jPanel3.repaint();
            jPanel3.revalidate();
            jPanel3.add(UserTable);                              //selects a jpanel, or question, at random
            jPanel3.repaint();
            jPanel3.revalidate();
            DefaultTableModel reset = (DefaultTableModel) viewUsersTable.getModel();
            reset.setRowCount(0); //reset table so it doesnt keep appending
            //print all the database columns onto jtable
            ResultSet result=DCC.query("SELECT * FROM Users");
            while(result.next()){
                String UserId=result.getString("UserId");
                String UserName=result.getString("UserName");
                String Email=result.getString("Email");
                String Phone=result.getString("Phone");
                String Address=result.getString("Address");               
                String tbData[]  = {UserId,UserName,Email,Phone, Address};
                DefaultTableModel tblModel = (DefaultTableModel) viewUsersTable.getModel();
                tblModel.addRow(tbData); 
            }
        } catch (SQLException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_ViewUserButtonActionPerformed

    private void ReturnHome1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnHome1ActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(HomePage);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
    }//GEN-LAST:event_ReturnHome1ActionPerformed

    private void AddUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddUserButtonActionPerformed
        // TODO add your handling code here
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(AddUser);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
    }//GEN-LAST:event_AddUserButtonActionPerformed

    private void SubmitUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitUserActionPerformed
    // TODO add your handling code here:
    //String useridStr = UserId.getText(); //gets user input for username
    String usernameStr = UserName.getText();  //gets user input for UserName
    String emailStr = UserEmail.getText(); //gets user input for UserEmail
    String phoneStr = UserPhone.getText();  //gets user input for UserPhone
    String addressStr = UserAddress.getText(); //gets user input for UserAddress

            int countcheck = 0;                     //countcheck set to 0  
        

            
            if ("".equals(usernameStr) || " ".equals(usernameStr)) { //error checking, if the usernameStr field is empty
                JOptionPane.showMessageDialog(null,"Please enter your username"); //joptionpane to display message, asking user to enter usernameStr
                countcheck = -1;  //countcheck set to minus 1
            }
            
            
            if ("".equals(emailStr) || " ".equals(emailStr)) { //error checking, if the emailStr field is empty
                JOptionPane.showMessageDialog(null,"Please enter your email"); //joptionpane to display message, asking user to enter emailStr
                countcheck = -1;  //countcheck set to minus 1
            }
            
            if ("".equals(phoneStr) || " ".equals(phoneStr)) { //error checking, if the phoneStr field is empty
                JOptionPane.showMessageDialog(null,"Please enter your phone"); //joptionpane to display message, asking user to enter phoneStr
                countcheck = -1;  //countcheck set to minus 1
            }         
                        
            if ("".equals(addressStr) || " ".equals(addressStr)) { //error checking, if the addressStr field is empty
                JOptionPane.showMessageDialog(null,"Please enter your Address"); //joptionpane to display message, asking user to enter addressStr
                countcheck = -1;  //countcheck set to minus 1
            }
           
            if (!"".equals(usernameStr) || " ".equals(usernameStr)) { //error checking, if the usernameStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
               
            if (!"".equals(emailStr) || " ".equals(emailStr)) { //error checking, if the emailStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
            
            if (!"".equals(phoneStr) || " ".equals(phoneStr)) { //error checking, if the phoneStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
        
            if (!"".equals(addressStr) || " ".equals(addressStr)) { //error checking, if the addressStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
        //if user already in database print error message  
        try {
	ResultSet result;
        //Check if user in database
        result = DCC.query("SELECT Email, Phone FROM Users WHERE Email='"+emailStr+"' or Phone='"+phoneStr+"' ");
        if(result.next()){
        JOptionPane.showMessageDialog(null,"User with that email/phone number already in database");
        countcheck = -1;
        }

               } catch (SQLException ex) {
        Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //if new user input them into database
            if (countcheck==4){
        try {
            //if the countcheck is zero           
            int done =DCC.update("INSERT INTO Users (UserName, Email, Phone, Address) VALUES ('"+usernameStr+"', '"+emailStr+"', '"+phoneStr+"', '"+addressStr+"')");
            
            jPanel3.removeAll();   //remove jpanel
            jPanel3.repaint();
            jPanel3.revalidate();
            jPanel3.add(HomePage);
            jPanel3.repaint();
            jPanel3.revalidate();
        } catch (SQLException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            }
        
    }//GEN-LAST:event_SubmitUserActionPerformed

    private void ReturnHome2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnHome2ActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(HomePage);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
        
        
    }//GEN-LAST:event_ReturnHome2ActionPerformed

    private void RemoveUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveUserButtonActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(RemoveUser);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
        
    }//GEN-LAST:event_RemoveUserButtonActionPerformed

    private void SubmitRemoveUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitRemoveUserActionPerformed
                                                            
                // TODO add your handling code here:
                String userNameStr = UserNameRemove.getText();  //gets user input for UserNameRemove
                String emailRemoveStr = EmailRemove.getText(); //gets user input for EmailRemove
                String phoneStr = PhoneRemove.getText();  //gets user input for PhoneRemove
                String addressStr = AddressRemove.getText(); //gets user input for AddressRemove
                
                int countcheck = 0;                     //countcheck set to 0
                
                if ("".equals(userNameStr) || " ".equals(userNameStr)) { //error checking, if the userNameStr field is empty
                    JOptionPane.showMessageDialog(null,"Please enter username"); //joptionpane to display message, asking user to enter userNameStr
                    countcheck = -1;  //countcheck set to minus 1
                }
                
                if ("".equals(emailRemoveStr) || " ".equals(emailRemoveStr)) { //error checking, if the emailRemoveStr field is empty
                    JOptionPane.showMessageDialog(null,"Please enter email"); //joptionpane to display message, asking user to enter emailRemoveStr
                    countcheck = -1;  //countcheck set to minus 1
                }
                
                if ("".equals(phoneStr) || " ".equals(phoneStr)) { //error checking, if the phoneStr field is empty
                    JOptionPane.showMessageDialog(null,"Please enter phone"); //joptionpane to display message, asking user to enter phoneStr
                    countcheck = -1;  //countcheck set to minus 1
                }
                
                if ("".equals(addressStr) || " ".equals(addressStr)) { //error checking, if the addressStr field is empty
                    JOptionPane.showMessageDialog(null,"Please enter address"); //joptionpane to display message, asking user to enter addressStr
                    countcheck = -1;  //countcheck set to minus 1
                }

                if (!"".equals(userNameStr) || " ".equals(userNameStr)) { //error checking, if the userNameStr field is empty
                    countcheck +=1;  //countcheck set to minus 1
                }
              
                if (!"".equals(emailRemoveStr) || " ".equals(emailRemoveStr)) { //error checking, if the emailRemoveStr field is empty
                    countcheck +=1;  //countcheck set to minus 1
                }
                
                if (!"".equals(phoneStr) || " ".equals(phoneStr)) { //error checking, if the phoneStr field is empty
                    countcheck +=1;  //countcheck set to minus 1
                }
                
                if (!"".equals(addressStr) || " ".equals(addressStr)) { //error checking, if the addressStr field is empty
                    countcheck +=1;  //countcheck set to minus 1
                }
                //if user not in database print error message
                try {
                ResultSet result=DCC.query("SELECT UserName, Email, Phone, Address FROM Users WHERE UserName='"+userNameStr+"' and Email='"+emailRemoveStr+"' and Phone='"+phoneStr+"' and Address='"+addressStr+"'");
                if(!result.next()){
                   JOptionPane.showMessageDialog(null,"User Not in Found");
                   countcheck = -1;
                }
                           }
                catch (SQLException ex) {
                Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE,null, ex);
                }
                //if user in database delete them
                if (countcheck==4){

                        //if the countcheck is zero
                        JOptionPane.showMessageDialog(null,"Deleted User");

                    try {
                        int done =DCC.update("DELETE FROM Users WHERE Email='"+emailRemoveStr+"'");
                    } catch (SQLException ex) {
                        Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                        
                        jPanel3.removeAll();   //remove jpanel
                        jPanel3.repaint();
                        jPanel3.revalidate();
                        jPanel3.add(HomePage);
                        jPanel3.repaint();
                        jPanel3.revalidate();

                }

    }//GEN-LAST:event_SubmitRemoveUserActionPerformed

    private void ReturnHome3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnHome3ActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(HomePage);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
    }//GEN-LAST:event_ReturnHome3ActionPerformed

    private void SubmitRemoveBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitRemoveBookActionPerformed
        // TODO add your handling code here:
            try {                                                 
                // TODO add your handling code here:
                String BookTitleStr = BookTitleRemove.getText();  //gets user input for BookTitleRemove
                String BookAuthourStr = BookAuthourRemove.getText(); //gets user input for BookAuthourRemove
                String BookPublisherStr = BookPublisherRemove.getText();  //gets user input for BookPublisherRemove
                String BookGenreStr = BookGenreRemove.getText(); //gets user input for BookGenreRemove
                String BookPriceStr = BookPriceRemove.getText();  //gets user input for BookPriceRemove
                String BookStockStr = BookStockRemove.getText(); //gets user input for BookStockRemove
                
                int countcheck = 0;                     //countcheck set to 0
                               
                if ("".equals(BookTitleStr) || " ".equals(BookTitleStr)) { //error checking, if the BookTitleStr field is empty
                    JOptionPane.showMessageDialog(null,"Please enter book title"); //joptionpane to display message, asking user to enter BookTitleStr
                    countcheck = -1;  //countcheck set to minus 1
                }
                              
                if ("".equals(BookAuthourStr) || " ".equals(BookAuthourStr)) { //error checking, if the BookAuthourStr field is empty
                    JOptionPane.showMessageDialog(null,"Please enter book authour"); //joptionpane to display message, asking user to enter BookAuthourStr
                    countcheck = -1;  //countcheck set to minus 1
                }
                
                if ("".equals(BookPublisherStr) || " ".equals(BookPublisherStr)) { //error checking, if the BookPublisherStr field is empty
                    JOptionPane.showMessageDialog(null,"Please enter book publisher"); //joptionpane to display message, asking user to enter BookPublisherStr
                    countcheck = -1;  //countcheck set to minus 1
                }
                
                if ("".equals(BookGenreStr) || " ".equals(BookGenreStr)) { //error checking, if the BookGenreStr field is empty
                    JOptionPane.showMessageDialog(null,"Please enter book genre"); //joptionpane to display message, asking user to enter BookGenreStr
                    countcheck = -1;  //countcheck set to minus 1
                }
                
                if ("".equals(BookPriceStr) || " ".equals(BookPriceStr)) { //error checking, if the BookPriceStr field is empty
                    JOptionPane.showMessageDialog(null,"Please enter book price"); //joptionpane to display message, asking user to enter BookPriceStr
                    countcheck = -1;  //countcheck set to minus 1
                }
                
                if ("".equals(BookStockStr) || " ".equals(BookStockStr)) { //error checking, if the BookStockStr field is empty
                    JOptionPane.showMessageDialog(null,"Please enter book stock"); //joptionpane to display message, asking user to enter BookStockStr
                    countcheck = -1;  //countcheck set to minus 1
                }             
                
                if ("".equals(BookStockStr) || " ".equals(BookStockStr)) { //error checking, if the BookStockStr field is empty
                    countcheck = -1;  //countcheck set to minus 1
                }                            
                //convert stock string to int
                int stockInt = 0;
                try {
                    stockInt = Integer.parseInt(BookStockStr);
                }
                catch (NumberFormatException e) {
                    //Not an integer
                    JOptionPane.showMessageDialog(null,"Book stock must be number");
                    countcheck = -1;
                }
     
            if (!"".equals(BookTitleStr) || " ".equals(BookTitleStr)) { //error checking, if the BookTitleStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
                        
            if (!"".equals(BookAuthourStr) || " ".equals(BookAuthourStr)) { //error checking, if the BookAuthourStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
            
            if (!"".equals(BookPublisherStr) || " ".equals(BookPublisherStr)) { //error checking, if the BookPublisherStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
        
            if (!"".equals(BookGenreStr) || " ".equals(BookGenreStr)) { //error checking, if the BookGenreStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }
            
            if (!"".equals(BookPriceStr) || " ".equals(BookPriceStr)) { //error checking, if the BookPriceStr field is empty
                countcheck +=1;  //countcheck set to minus 1
            }      
       
            //if there is only 1 stock of that book left delete it from table
            ResultSet result=DCC.query("SELECT Title, Authour, Publisher, Genre, Price, Stock FROM Books WHERE Title='"+BookTitleStr+"' and Authour='"+BookAuthourStr+"' and Publisher='"+BookPublisherStr+"' and Genre='"+BookGenreStr+"' and Price='"+BookPriceStr+"' and Stock<2");
            if(result.next()){
                JOptionPane.showMessageDialog(null,"Deleting book from database");
                int done =DCC.update("DELETE FROM Books WHERE Title='"+BookTitleStr+"'");
                //int done =DCC.update("UPDATE Books SET Stock = "+stockInt+" WHERE Title='"+BookTitleStr+"' and Authour='"+BookAuthourStr+"' and Publisher='"+BookPublisherStr+"' and Genre='"+BookGenreStr+"' and Price='"+BookPriceStr+"'");
                countcheck = -1;
            }  
            
            //if there is 1 of this book in database you can add +1 to counter
            ResultSet result2=DCC.query("SELECT Title, Authour, Publisher, Genre, Price, Stock FROM Books WHERE Title='"+BookTitleStr+"' and Authour='"+BookAuthourStr+"' and Publisher='"+BookPublisherStr+"' and Genre='"+BookGenreStr+"' and Price='"+BookPriceStr+"' and Stock>0");
            if(result2.next()){
                countcheck += 1;
            }  
            
            //remove book stock from database and if user specifies all stock it deletes from database
                if (countcheck==6){

                        //if the countcheck is zero

                        int done =DCC.update("UPDATE Books SET Stock = Stock - "+stockInt+" WHERE Title='"+BookTitleStr+"' and Authour='"+BookAuthourStr+"' and Publisher='"+BookPublisherStr+"' and Genre='"+BookGenreStr+"' and Price='"+BookPriceStr+"'");
                        ResultSet result3=DCC.query("SELECT Title, Authour, Publisher, Genre, Price, Stock FROM Books WHERE Title='"+BookTitleStr+"' and Authour='"+BookAuthourStr+"' and Publisher='"+BookPublisherStr+"' and Genre='"+BookGenreStr+"' and Price='"+BookPriceStr+"' and Stock<1");
                        if(result3.next()){
                        JOptionPane.showMessageDialog(null,"Deleting book from database");
                        int done2 =DCC.update("DELETE FROM Books WHERE Title='"+BookTitleStr+"'");
                        }  
                }
                
            }
            catch (SQLException ex) {
                 Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE,null, ex);
            }
     
    }//GEN-LAST:event_SubmitRemoveBookActionPerformed

    private void ReturnHome5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnHome5ActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(HomePage);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
    }//GEN-LAST:event_ReturnHome5ActionPerformed

    private void IssueBooksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IssueBooksButtonActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(IssueBook);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
    }//GEN-LAST:event_IssueBooksButtonActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        String bookTitleStr = BookTitleIssue.getText();     //gets user input for BookTitleIssue
        String bookAuthourStr = BookAuthourIssue.getText();   //gets user input for book authour
        String bookPublisherStr = BookPublisherIssue.getText(); //gets user input for book publisher
        String bookGenreStr = BookGenreIssue.getText();     //gets user input for book genre
        String bookPriceStr = BookPriceIssue.getText();     //gets user input for book price
        String bookStockStr = BookStockIssue.getText();     //gets user input for BookStockIssue
        String personNameStr = PersonNameIssue.getText();     //gets user input for PersonNameIssue
        String personAddressStr = PersonAddressIssue.getText();     //gets user input for PersonAddressIssue
        String personEmailStr = PersonEmailIssue.getText();     //gets user input for PersonEmailIssue
        String personPhoneStr = PersonPhoneIssue.getText();     //gets user input for PersonPhoneIssue
        int countcheck = 0;                              //countcheck variable set to 0
        int buyOrRent = BuyorRent.getSelectedIndex();

        if ("".equals(bookTitleStr) || " ".equals(bookTitleStr)) { //error checking, if the book title field is empty
            JOptionPane.showMessageDialog(null,"Please enter a book title"); //joptionpane to display message, asking user to enter the book title
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(bookAuthourStr) || " ".equals(bookAuthourStr)) { //error checking, if the book authour field is empty
            JOptionPane.showMessageDialog(null,"Please enter the authour of the book"); //joptionpane to display message, asking user to enter the book authour
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(bookPublisherStr) || " ".equals(bookPublisherStr)) { //error checking, if the book publisher field is empty
            JOptionPane.showMessageDialog(null,"Please enter the publisher of the book"); //joptionpane to display message, asking user to enter the book publisher
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(bookGenreStr) || " ".equals(bookGenreStr)) { //error checking, if the book genre field is empty
            JOptionPane.showMessageDialog(null,"Please enter the genre of the book"); //joptionpane to display message, asking user to enter the book genre
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(bookPriceStr) || " ".equals(bookPriceStr)) { //error checking, if the price field is empty
            JOptionPane.showMessageDialog(null,"Please enter the price of the book"); //joptionpane to display message, asking user to enter the book price
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(personNameStr) || " ".equals(personNameStr)) { //error checking, if the book personNameStr is empty
            JOptionPane.showMessageDialog(null,"Please enter the name of the person"); //joptionpane to display message, asking user to enter the personNameStr
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(personAddressStr) || " ".equals(personAddressStr)) { //error checking, if the personAddressStr field is empty
            JOptionPane.showMessageDialog(null,"Please enter the address of the person"); //joptionpane to display message, asking user to enter the personAddressStr
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(personEmailStr) || " ".equals(personEmailStr)) { //error checking, if the personEmailStr field is empty
            JOptionPane.showMessageDialog(null,"Please enter the email of the person"); //joptionpane to display message, asking user to enter the personEmailStr
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(personPhoneStr) || " ".equals(personPhoneStr)) { //error checking, if the personPhoneStr field is empty
            JOptionPane.showMessageDialog(null,"Please enter the phone number of the person"); //joptionpane to display message, asking user to enter the personPhoneStr
            countcheck = -1;  //countcheck set to minus 1
        }

        //conver stock string to int
        int stockInt = 0;
        try {
            stockInt = Integer.parseInt(bookStockStr);
        }
        catch (NumberFormatException e) {
            //Not an integer
            JOptionPane.showMessageDialog(null,"Book stock must be number");
            countcheck = -1;
        }

        if (!"".equals(bookTitleStr) || " ".equals(bookTitleStr)) { //error checking, if the book title field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(bookAuthourStr) || " ".equals(bookAuthourStr)) { //error checking, if the book authour field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(bookPublisherStr) || " ".equals(bookPublisherStr)) { //error checking, if the book publisher field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(bookGenreStr) || " ".equals(bookGenreStr)) { //error checking, if the book genre field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(bookPriceStr) || " ".equals(bookPriceStr)) { //error checking, if the book price field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(personNameStr) || " ".equals(personNameStr)) { //error checking, if the personNameStr field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(personAddressStr) || " ".equals(personAddressStr)) { //error checking, if the personAddressStr field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(personEmailStr) || " ".equals(personEmailStr)) { //error checking, if the personEmailStr field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(personPhoneStr) || " ".equals(personPhoneStr)) { //error checking, if the personPhoneStr field is not empty
            countcheck +=1;  //countcheck increments by 1
        }
        
        
        //Check user didnt input value that exceeds the amount of stock in database
                ResultSet result;
        try {
            result = DCC.query("SELECT Stock FROM Books WHERE Title='"+bookTitleStr+"' and Authour='"+bookAuthourStr+"' and Publisher='"+bookPublisherStr+"' and Genre='"+bookGenreStr+"' and Price='"+bookPriceStr+"'");
          
        if(result.next()){
        String BookStock=result.getString("Stock");
        int stockInt2 = Integer.parseInt(BookStock);
        int stockInt3=0;
        stockInt3 = stockInt2 - stockInt;
        if (stockInt3 < 0) {
        JOptionPane.showMessageDialog(null,"Invalid number there are not that many stock");
        countcheck = -1; 
        }
        }
                        } catch (SQLException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
        //Check if book in database
        result = DCC.query("SELECT Title FROM Books WHERE Title='"+bookTitleStr+"' and Authour='"+bookAuthourStr+"' and Publisher='"+bookPublisherStr+"' and Genre='"+bookGenreStr+"' and Price='"+bookPriceStr+"' ");
        if(!result.next()){
            JOptionPane.showMessageDialog(null,"Book not in stock");
            countcheck = -1;
        }
        
                               } catch (SQLException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
               
        try {
        //Check if user in database
        result = DCC.query("SELECT UserName, Address, Email, Phone FROM Users WHERE UserName='"+personNameStr+"' and Address='"+personAddressStr+"' and Email='"+personEmailStr+"' and Phone='"+personPhoneStr+"' ");
        if(!result.next()){
        JOptionPane.showMessageDialog(null,"User not in database");
        countcheck = -1;
        }

               } catch (SQLException ex) {
        Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }  
  
        //If user has already bought or rented a book go in here and just increase the amount they took by increasing their stock number
        if (countcheck==9){  try {
        //ResultSet result=DCC.query("SELECT UserName, Password FROM Admin WHERE Username='"+UserName+"' and Password='"+Password+"'");
        ResultSet result2;
       
            result2 = DCC.query("SELECT BookTitle, BookAuthour, BookPublisher, BookGenre, BookPrice, UserName, UserAddress, UserEmail, UserPhone FROM BooksIssued WHERE BookTitle='"+bookTitleStr+"' and BookAuthour='"+bookAuthourStr+"' and BookPublisher='"+bookPublisherStr+"' and BookGenre='"+bookGenreStr+"' and BookPrice='"+bookPriceStr+"' and UserName='"+personNameStr+"' and UserAddress='"+personAddressStr+"' and UserEmail='"+personEmailStr+"' and UserPhone='"+personPhoneStr+"' ");
            if(result2.next()){
                JOptionPane.showMessageDialog(null,"BooksIssued in Database taking stock "+stockInt);
                //Remove stock from books and if the users removes more books then in database it will delete the book from the database
                int done2 =DCC.update("UPDATE Books SET Stock = Stock - "+stockInt+" WHERE Title='"+bookTitleStr+"' and Authour='"+bookAuthourStr+"' and Publisher='"+bookPublisherStr+"' and Genre='"+bookGenreStr+"' and Price='"+bookPriceStr+"'");
                ResultSet result3=DCC.query("SELECT Title FROM Books WHERE Title='"+bookTitleStr+"' and Stock<1");
                if(result3.next()){
                JOptionPane.showMessageDialog(null,"You've taken all the stock removing book from database");
                int done3 =DCC.update("DELETE FROM Books WHERE Title='"+bookTitleStr+"'");
                }
                int done =DCC.update("UPDATE BooksIssued SET BookStock = BookStock + "+stockInt+" WHERE BookTitle='"+bookTitleStr+"' and BookAuthour='"+bookAuthourStr+"' and BookPublisher='"+bookPublisherStr+"' and BookGenre='"+bookGenreStr+"' and BookPrice='"+bookPriceStr+"' and UserName='"+personNameStr+"' and UserAddress='"+personAddressStr+"' and UserEmail='"+personEmailStr+"' and UserPhone='"+personPhoneStr+"' ");
                countcheck = -1; 
            }
        } catch (SQLException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

        //if user hasn't gotten book add to issued book table
        if (countcheck==9 && buyOrRent==0) { try {
            //for buy
            //call function here
            JOptionPane.showMessageDialog(null,"Buy Book");
            
            //Remove stock from books and if the users removes more books then in database it will delete the book from the database
            int done2 =DCC.update("UPDATE Books SET Stock = Stock - "+stockInt+" WHERE Title='"+bookTitleStr+"' and Authour='"+bookAuthourStr+"' and Publisher='"+bookPublisherStr+"' and Genre='"+bookGenreStr+"' and Price='"+bookPriceStr+"'");
            ResultSet result2=DCC.query("SELECT Title FROM Books WHERE Title='"+bookTitleStr+"' and Stock<1");
            if(result2.next()){
            JOptionPane.showMessageDialog(null,"You've taken all the stock removing book from database");
            int done3 =DCC.update("DELETE FROM Books WHERE Title='"+bookTitleStr+"'");
            }
  
            int done =DCC.update("INSERT INTO BooksIssued (BookTitle, BookAuthour, BookPublisher, BookGenre, BookPrice, BookStock, UserName, UserAddress, UserEmail, UserPhone, BuyOrRent, DatePurchased) VALUES ('"+bookTitleStr+"', '"+bookAuthourStr+"', '"+bookPublisherStr+"', '"+bookGenreStr+"', '"+bookPriceStr+"', "+stockInt+", '"+personNameStr+"', '"+personAddressStr+"', '"+personEmailStr+"', '"+personPhoneStr+"', 'Buy', now() )");
            //DataHandler.IssueBookForBuy(bookTitleStr, bookAuthourStr, bookPublisherStr, bookGenreStr, bookPriceStr, stockInt, personNameStr, personAddressStr, personEmailStr, personPhoneStr);
            //JOptionPane.showMessageDialog(null, bookTitleStr + " issued successfully to " + personNameStr); //joptionpane to display message, confirming that the user has successfully added a book to the db
            } catch (SQLException ex) {
                Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        //if user hasn't gotten book add to issued book table
        if (countcheck==9 && buyOrRent==1) { try {
            //for rent
            //call function here
            JOptionPane.showMessageDialog(null,"Rent Book");

            //Remove stock from books and if the users removes more books then in database it will delete the book from the database
            int done5 =DCC.update("UPDATE Books SET Stock = Stock - "+stockInt+" WHERE Title='"+bookTitleStr+"' and Authour='"+bookAuthourStr+"' and Publisher='"+bookPublisherStr+"' and Genre='"+bookGenreStr+"' and Price='"+bookPriceStr+"'");
            ResultSet result5=DCC.query("SELECT Title FROM Books WHERE Title='"+bookTitleStr+"' and Stock<1");
            if(result5.next()){
            JOptionPane.showMessageDialog(null,"You've taken all the stock removing book from database");
            int done3 =DCC.update("DELETE FROM Books WHERE Title='"+bookTitleStr+"'");
            }

            int done =DCC.update("INSERT INTO BooksIssued (BookTitle, BookAuthour, BookPublisher, BookGenre, BookPrice, BookStock, UserName, UserAddress, UserEmail, UserPhone, BuyOrRent, DatePurchased, DateForReturn) VALUES ('"+bookTitleStr+"', '"+bookAuthourStr+"', '"+bookPublisherStr+"', '"+bookGenreStr+"', '"+bookPriceStr+"', "+stockInt+", '"+personNameStr+"', '"+personAddressStr+"', '"+personEmailStr+"', '"+personPhoneStr+"', 'Rent', now(), dateadd('d',7,now()) )");
            //DataHandler.IssueBookForRent(bookTitleStr, bookAuthourStr, bookPublisherStr, bookGenreStr, bookPriceStr, stockInt, personNameStr, personAddressStr, personEmailStr, personPhoneStr);
            //JOptionPane.showMessageDialog(null, bookTitleStr + " issued successfully to " + personNameStr); //joptionpane to display message, confirming that the user has successfully added a book to the db
            } catch (SQLException ex) {
                Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void ReturnHome6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnHome6ActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(HomePage);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
    }//GEN-LAST:event_ReturnHome6ActionPerformed

    private void BuyorRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyorRentActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_BuyorRentActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(IssueBook);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Boolean printTable = viewIssuedBooksTable.print();
            if (printTable) {
                JOptionPane.showMessageDialog(null, "Printing is done");
            }
        } catch (PrinterException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton30ActionPerformed

    private void OverdueAccountsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OverdueAccountsButtonActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            jPanel3.removeAll();                          //remove jpanel
            jPanel3.repaint();
            jPanel3.revalidate();
            jPanel3.add(OverdueAccounts);                              //selects a jpanel, or question, at random
            jPanel3.repaint();
            jPanel3.revalidate();
            
            DefaultTableModel reset = (DefaultTableModel) viewOverdueAccountsTable.getModel();
            reset.setRowCount(0); //reset table so it doesnt keep appending
            
            //print all database columns onto jtable
            ResultSet result=DCC.query("SELECT * FROM BooksIssued WHERE DateForReturn<now()");
            while(result.next()){
                String BookTitle=result.getString("BookTitle");
                String BookAuthour=result.getString("BookAuthour");
                String BookPublisher=result.getString("BookPublisher");
                String BookGenre=result.getString("BookGenre");
                String BookPrice=result.getString("BookPrice");   
                
                String BookStock=result.getString("BookStock");
                String UserName=result.getString("UserName");
                String UserAddress=result.getString("UserAddress");
                String UserEmail=result.getString("UserEmail");
                String UserPhone=result.getString("UserPhone");   
                String BuyOrRent=result.getString("BuyOrRent");  
                String DatePurchased=result.getString("DatePurchased");   
                String DateForReturn=result.getString("DateForReturn");  
                
                String tbData[]  = {BookTitle,BookAuthour,BookPublisher,BookGenre,BookPrice,BookStock,UserName,UserAddress,UserEmail,UserPhone,BuyOrRent,DatePurchased,DateForReturn};
                DefaultTableModel tblModel = (DefaultTableModel) viewOverdueAccountsTable.getModel();
                tblModel.addRow(tbData); 
            }
        } catch (SQLException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_OverdueAccountsButtonActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(HomePage);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Boolean printTable = viewOverdueAccountsTable.print();
            if (printTable) {
                JOptionPane.showMessageDialog(null, "Printing is done");
            }
        } catch (PrinterException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        String bookTitleStr = BookTitleReturn.getText();     //gets user input for book title
        String bookAuthourStr = BookAuthourReturn.getText();   //gets user input for book authour
        String bookPublisherStr = BookPublisherReturn.getText(); //gets user input for book publisher
        String bookGenreStr = BookGenreReturn.getText();     //gets user input for book genre
        String bookPriceStr = BookPriceReturn.getText();     //gets user input for book price
        String bookStockStr = BookStockReturn.getText();     //gets user input for BookStockReturn
        String personEmailStr = PersonEmailReturn.getText();     //gets user input for PersonEmailReturn
        int countcheck = 0;                              //countcheck variable set to 0
        int buyOrRent = BuyorRentReturn.getSelectedIndex();

        if ("".equals(bookTitleStr) || " ".equals(bookTitleStr)) { //error checking, if the book title field is empty
            JOptionPane.showMessageDialog(null,"Please enter a book title"); //joptionpane to display message, asking user to enter the book title
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(bookAuthourStr) || " ".equals(bookAuthourStr)) { //error checking, if the book authour field is empty
            JOptionPane.showMessageDialog(null,"Please enter the authour of the book"); //joptionpane to display message, asking user to enter the book authour
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(bookPublisherStr) || " ".equals(bookPublisherStr)) { //error checking, if the book publisher field is empty
            JOptionPane.showMessageDialog(null,"Please enter the publisher of the book"); //joptionpane to display message, asking user to enter the book publisher
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(bookGenreStr) || " ".equals(bookGenreStr)) { //error checking, if the book genre field is empty
            JOptionPane.showMessageDialog(null,"Please enter the genre of the book"); //joptionpane to display message, asking user to enter the book genre
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(bookPriceStr) || " ".equals(bookPriceStr)) { //error checking, if the price field is empty
            JOptionPane.showMessageDialog(null,"Please enter the price of the book"); //joptionpane to display message, asking user to enter the book price
            countcheck = -1;  //countcheck set to minus 1
        }

        if ("".equals(personEmailStr) || " ".equals(personEmailStr)) { //error checking, if the book personEmailStr field is empty
            JOptionPane.showMessageDialog(null,"Please enter the email of the person"); //joptionpane to display message, asking user to enter the personEmailStr
            countcheck = -1;  //countcheck set to minus 1
        }

        //convert stock string to int
        int stockInt = 0;
        try {
            stockInt = Integer.parseInt(bookStockStr);
        }
        catch (NumberFormatException e) {
            //Not an integer
            JOptionPane.showMessageDialog(null,"Book stock must be number");
            countcheck = -1;
        }

        if (!"".equals(bookTitleStr) || " ".equals(bookTitleStr)) { //error checking, if the book title field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(bookAuthourStr) || " ".equals(bookAuthourStr)) { //error checking, if the book authour field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(bookPublisherStr) || " ".equals(bookPublisherStr)) { //error checking, if the book publisher field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(bookGenreStr) || " ".equals(bookGenreStr)) { //error checking, if the book genre field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(bookPriceStr) || " ".equals(bookPriceStr)) { //error checking, if the book price field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        if (!"".equals(personEmailStr) || " ".equals(personEmailStr)) { //error checking, if the personEmailStr field is not empty
            countcheck +=1;  //countcheck increments by 1
        }

        try {
        ResultSet result;
        //Check user didnt input value that exceeds the amount of stock in database
        result = DCC.query("SELECT BookTitle, BookAuthour, BookPublisher, BookGenre, BookPrice FROM BooksIssued WHERE BookTitle='"+bookTitleStr+"' and BookAuthour='"+bookAuthourStr+"' and BookPublisher='"+bookPublisherStr+"' and BookGenre='"+bookGenreStr+"' and BookPrice='"+bookPriceStr+"' and UserEmail='"+personEmailStr+"'");
        if(!result.next()){
        JOptionPane.showMessageDialog(null,"You do not have this book");
        countcheck =-1;
        }     
        } catch (SQLException ex) {
        Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }  
        
        //Check user didnt input value that exceeds the amount of stock in database  
        try {
            ResultSet result;
        result = DCC.query("SELECT BookStock FROM BooksIssued WHERE BookTitle='"+bookTitleStr+"' and UserEmail='"+personEmailStr+"'");

        if(result.next()){
        String BookStock=result.getString("BookStock");
        int stockInt2 = Integer.parseInt(BookStock);
        int stockInt3=0;
        stockInt3 = stockInt2 - stockInt;
        if (stockInt3 < 0) {
        JOptionPane.showMessageDialog(null,"Invalid number you do not have that many");
        countcheck = -1; 
        }
        }
                 } catch (SQLException ex) {
        Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        //If user has already bought or rented a book go in here and just increase the amount they took by increasing their stock number
        if (countcheck==6){
        //ResultSet result=DCC.query("SELECT UserName, Password FROM Admin WHERE Username='"+UserName+"' and Password='"+Password+"'");
        ResultSet result;
        try {
            result = DCC.query("SELECT Title FROM Books WHERE Title='"+bookTitleStr+"'");
            if(result.next()){
                JOptionPane.showMessageDialog(null,"Adding stock back to books table "+stockInt);
                //Remove stock from booksissued and if the users removes more books then in database it will delete the book from the database
                int done2 =DCC.update("UPDATE BooksIssued SET BookStock = BookStock - "+stockInt+" WHERE BookTitle='"+bookTitleStr+"' and UserEmail='"+personEmailStr+"'");
                ResultSet result3=DCC.query("SELECT BookTitle, UserEmail FROM BooksIssued WHERE BookTitle='"+bookTitleStr+"' and UserEmail='"+personEmailStr+"' and BookStock<1");
                if(result3.next()){
                JOptionPane.showMessageDialog(null,"You've given all books back");
                int done3 =DCC.update("DELETE FROM BooksIssued WHERE BookTitle='"+bookTitleStr+"' and UserEmail='"+personEmailStr+"'");
                }
                int done =DCC.update("UPDATE Books SET Stock = Stock + "+stockInt+" WHERE Title='"+bookTitleStr+"'");
                countcheck = -1; 
            }
        } catch (SQLException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

        if (countcheck==6 && buyOrRent==0) { try {
            //for buy
            //call function here
            JOptionPane.showMessageDialog(null,"Give bought book back");
            
            //Remove stock from books and if the users removes more books then in database it will delete the book from the database
            int done2 =DCC.update("UPDATE BooksIssued SET BookStock = BookStock - "+stockInt+" WHERE BookTitle='"+bookTitleStr+"' and UserEmail='"+personEmailStr+"'");
            ResultSet result2=DCC.query("SELECT BookTitle FROM BooksIssued WHERE BookTitle='"+bookTitleStr+"' and UserEmail='"+personEmailStr+"' and BookStock<1");
            if(result2.next()){
            JOptionPane.showMessageDialog(null,"You've given all your books");
            int done3 =DCC.update("DELETE FROM BooksIssued WHERE BookTitle='"+bookTitleStr+"' and UserEmail='"+personEmailStr+"'");
            }
            
            int done =DCC.update("INSERT INTO Books (Title, Authour, Publisher, Genre, Price, Stock) VALUES ('"+bookTitleStr+"', '"+bookAuthourStr+"', '"+bookPublisherStr+"', '"+bookGenreStr+"', '"+bookPriceStr+"', "+stockInt+")");
            //DataHandler.IssueBookForBuy(bookTitleStr, bookAuthourStr, bookPublisherStr, bookGenreStr, bookPriceStr, stockInt, personNameStr, personAddressStr, personEmailStr, personPhoneStr);
            //JOptionPane.showMessageDialog(null, bookTitleStr + " issued successfully to " + personNameStr); //joptionpane to display message, confirming that the user has successfully added a book to the db
            } catch (SQLException ex) {
                Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (countcheck==6 && buyOrRent==1) { try {
            //for rent
            //call function here
            JOptionPane.showMessageDialog(null,"Give rented book back");
            
            
            //Remove stock from books and if the users removes more books then in database it will delete the book from the database
            int done2 =DCC.update("UPDATE BooksIssued SET BookStock = BookStock - "+stockInt+" WHERE BookTitle='"+bookTitleStr+"' and UserEmail='"+personEmailStr+"'");
            ResultSet result2=DCC.query("SELECT BookTitle FROM BooksIssued WHERE BookTitle='"+bookTitleStr+"' and UserEmail='"+personEmailStr+"' and BookStock<1");
            if(result2.next()){
            JOptionPane.showMessageDialog(null,"You've given all your books");
            int done3 =DCC.update("DELETE FROM BooksIssued WHERE BookTitle='"+bookTitleStr+"' and UserEmail='"+personEmailStr+"'");
            }

            int done =DCC.update("INSERT INTO Books (Title, Authour, Publisher, Genre, Price, Stock) VALUES ('"+bookTitleStr+"', '"+bookAuthourStr+"', '"+bookPublisherStr+"', '"+bookGenreStr+"', '"+bookPriceStr+"', "+stockInt+")");
            //DataHandler.IssueBookForRent(bookTitleStr, bookAuthourStr, bookPublisherStr, bookGenreStr, bookPriceStr, stockInt, personNameStr, personAddressStr, personEmailStr, personPhoneStr);
            //JOptionPane.showMessageDialog(null, bookTitleStr + " issued successfully to " + personNameStr); //joptionpane to display message, confirming that the user has successfully added a book to the db
            } catch (SQLException ex) {
                Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_jButton14ActionPerformed

    private void ReturnHome7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnHome7ActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(HomePage);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
        
    }//GEN-LAST:event_ReturnHome7ActionPerformed

    private void BuyorRentReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyorRentReturnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BuyorRentReturnActionPerformed

    private void IssuedBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IssuedBookActionPerformed
        try {
            // TODO add your handling code here:
            jPanel3.removeAll();                          //remove jpanel
            jPanel3.repaint();
            jPanel3.revalidate();
            jPanel3.add(IssuedBookTable);                              //selects a jpanel, or question, at random
            jPanel3.repaint();
            jPanel3.revalidate();
            //String DisplayBooks = "BooksIssued";
            //viewIssuedBooksTable.setModel(tableModel);
            //tableModel.setDataVector(DataHandler.getRows(DisplayBooks), DataHandler.getTitles(DisplayBooks));

            DefaultTableModel reset = (DefaultTableModel) viewIssuedBooksTable.getModel();
            reset.setRowCount(0);

            ResultSet result=DCC.query("SELECT * FROM BooksIssued");
            while(result.next()){
                String BookTitle=result.getString("BookTitle");
                String BookAuthour=result.getString("BookAuthour");
                String BookPublisher=result.getString("BookPublisher");
                String BookGenre=result.getString("BookGenre");
                String BookPrice=result.getString("BookPrice");

                String BookStock=result.getString("BookStock");
                String UserName=result.getString("UserName");
                String UserAddress=result.getString("UserAddress");
                String UserEmail=result.getString("UserEmail");
                String UserPhone=result.getString("UserPhone");
                String BuyOrRent=result.getString("BuyOrRent");
                String DatePurchased=result.getString("DatePurchased");
                String DateForReturn=result.getString("DateForReturn");

                String tbData[]  = {BookTitle,BookAuthour,BookPublisher,BookGenre,BookPrice,BookStock,UserName,UserAddress,UserEmail,UserPhone,BuyOrRent,DatePurchased,DateForReturn};
                DefaultTableModel tblModel = (DefaultTableModel) viewIssuedBooksTable.getModel();
                tblModel.addRow(tbData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_IssuedBookActionPerformed

    private void ReturnBooksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnBooksButtonActionPerformed
        // TODO add your handling code here:
        jPanel3.removeAll();                          //remove jpanel
        jPanel3.repaint();
        jPanel3.revalidate();
        jPanel3.add(ReturnBook);                              //selects a jpanel, or question, at random
        jPanel3.repaint();
        jPanel3.revalidate();
    }//GEN-LAST:event_ReturnBooksButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        try {
            // TODO add your handling code here:
            Boolean printTable = viewIssuedBooksTable.print();
            if (printTable) {
                JOptionPane.showMessageDialog(null, "Printing is done");
            }
        } catch (PrinterException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        try {
            // TODO add your handling code here:
            Boolean printTable = viewIssuedBooksTable.print();
            if (printTable) {
                JOptionPane.showMessageDialog(null, "Printing is done");
            }
        } catch (PrinterException ex) {
            Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
  
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) { //the main function
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SampleJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SampleJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SampleJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SampleJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new SampleJFrame().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(SampleJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddBook;
    private javax.swing.JButton AddBookButton;
    private javax.swing.JPanel AddUser;
    private javax.swing.JButton AddUserButton;
    private javax.swing.JTextField AddressRemove;
    private javax.swing.JTextField BookAuthour;
    private javax.swing.JTextField BookAuthourIssue;
    private javax.swing.JTextField BookAuthourRemove;
    private javax.swing.JTextField BookAuthourReturn;
    private javax.swing.JTextField BookGenre;
    private javax.swing.JTextField BookGenreIssue;
    private javax.swing.JTextField BookGenreRemove;
    private javax.swing.JTextField BookGenreReturn;
    private javax.swing.JTextField BookPrice;
    private javax.swing.JTextField BookPriceIssue;
    private javax.swing.JTextField BookPriceRemove;
    private javax.swing.JTextField BookPriceReturn;
    private javax.swing.JTextField BookPublisher;
    private javax.swing.JTextField BookPublisherIssue;
    private javax.swing.JTextField BookPublisherRemove;
    private javax.swing.JTextField BookPublisherReturn;
    private javax.swing.JTextField BookStock;
    private javax.swing.JTextField BookStockIssue;
    private javax.swing.JTextField BookStockRemove;
    private javax.swing.JTextField BookStockReturn;
    private javax.swing.JPanel BookTable;
    private javax.swing.JTextField BookTitle;
    private javax.swing.JTextField BookTitleIssue;
    private javax.swing.JTextField BookTitleRemove;
    private javax.swing.JTextField BookTitleReturn;
    private javax.swing.JComboBox<String> BuyorRent;
    private javax.swing.JComboBox<String> BuyorRentReturn;
    private javax.swing.JTextField EmailRemove;
    private javax.swing.JPanel HomePage;
    private javax.swing.JPanel IssueBook;
    private javax.swing.JButton IssueBooksButton;
    private javax.swing.JButton IssuedBook;
    private javax.swing.JPanel IssuedBookTable;
    private javax.swing.JPanel Login;
    private javax.swing.JButton LoginButton;
    private javax.swing.JButton LogoutButton;
    private javax.swing.JPanel OverdueAccounts;
    private javax.swing.JButton OverdueAccountsButton;
    private javax.swing.JTextField Password;
    private javax.swing.JTextField PersonAddressIssue;
    private javax.swing.JTextField PersonEmailIssue;
    private javax.swing.JTextField PersonEmailReturn;
    private javax.swing.JTextField PersonNameIssue;
    private javax.swing.JTextField PersonPhoneIssue;
    private javax.swing.JTextField PhoneRemove;
    private javax.swing.JPanel RemoveBook;
    private javax.swing.JButton RemoveBookButton;
    private javax.swing.JPanel RemoveUser;
    private javax.swing.JButton RemoveUserButton;
    private javax.swing.JPanel ReturnBook;
    private javax.swing.JButton ReturnBooksButton;
    private javax.swing.JButton ReturnHome;
    private javax.swing.JButton ReturnHome1;
    private javax.swing.JButton ReturnHome2;
    private javax.swing.JButton ReturnHome3;
    private javax.swing.JButton ReturnHome4;
    private javax.swing.JButton ReturnHome5;
    private javax.swing.JButton ReturnHome6;
    private javax.swing.JButton ReturnHome7;
    private javax.swing.JButton SubmitBook;
    private javax.swing.JButton SubmitRemoveBook;
    private javax.swing.JButton SubmitRemoveUser;
    private javax.swing.JButton SubmitUser;
    private javax.swing.JTextField UserAddress;
    private javax.swing.JTextField UserEmail;
    private javax.swing.JTextField UserName;
    private javax.swing.JTextField UserNameRemove;
    private javax.swing.JTextField UserPhone;
    private javax.swing.JPanel UserTable;
    private javax.swing.JTextField Username;
    private javax.swing.JButton ViewBookButton;
    private javax.swing.JButton ViewUserButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable viewBooksTable;
    private javax.swing.JTable viewIssuedBooksTable;
    private javax.swing.JTable viewOverdueAccountsTable;
    private javax.swing.JTable viewUsersTable;
    // End of variables declaration//GEN-END:variables
    private javax.swing.table.DefaultTableModel tableModel;
}
